{"version":3,"sources":["images/game-start-bg.png","images/hand.svg","components/AnswerButton/index.js","components/MobileButton/index.js","components/RewardsList/index.js","pages/Game/index.js","pages/HomeScreen/index.js","components/App/index.js","index.js"],"names":["module","exports","AnswerButton","letter","text","currentQuestion","switchToNextQuestion","finishGame","useState","selected","setSelected","correct","setCorreсt","wrong","setWrong","handleCorrectAnswer","setTimeout","handleWrongAnswer","stateClass","className","onClick","e","currentTarget","dataset","persist","includes","data-letter","MobileButton","setShowRewards","open","setOpen","prev","RewardsList","rewards","questionNumber","rewardsLength","length","map","reward","i","reversedIndex","state","key","Game","setGameFinished","setReward","setGameStarted","setQuestionNumber","showRewards","questions","prevQuestionReward","question","answers","item","answer","reverse","HomeScreen","gameFinished","style","backgroundImage","backgroundImg","src","require","alt","App","gameStarted","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89b8de8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/game-start-bg.0f121bb3.png\";","module.exports = __webpack_public_path__ + \"static/media/hand.86b8c05e.svg\";","import React, { useState } from 'react';\r\n\r\nimport './style.scss';\r\nimport { string, func, shape, arrayOf } from 'prop-types';\r\n\r\nconst AnswerButton = ({\r\n\tletter,\r\n\ttext,\r\n\tcurrentQuestion,\r\n\tswitchToNextQuestion,\r\n\tfinishGame,\r\n}) => {\r\n\tconst [selected, setSelected] = useState(false);\r\n\tconst [correct, setCorreсt] = useState(false);\r\n\tconst [wrong, setWrong] = useState(false);\r\n\r\n\tconst handleClick = (e) => {\r\n\t\tsetSelected(true);\r\n\r\n\t\tconst letter = e.currentTarget.dataset.letter;\r\n\t\te.persist();\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tsetSelected(false);\r\n\r\n\t\t\tcurrentQuestion.correct.includes(letter)\r\n\t\t\t\t? handleCorrectAnswer()\r\n\t\t\t\t: handleWrongAnswer();\r\n\t\t}, 1000);\r\n\t};\r\n\r\n\tconst handleCorrectAnswer = () => {\r\n\t\tsetCorreсt(true);\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tswitchToNextQuestion();\r\n\t\t\tsetCorreсt(false);\r\n\t\t}, 1000);\r\n\t};\r\n\r\n\tconst handleWrongAnswer = () => {\r\n\t\tsetWrong(true);\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tfinishGame();\r\n\t\t}, 1000);\r\n\t};\r\n\r\n\tlet stateClass = '';\r\n\r\n\tswitch (true) {\r\n\t\tcase selected:\r\n\t\t\tstateClass = 'selected';\r\n\t\t\tbreak;\r\n\t\tcase correct:\r\n\t\t\tstateClass = 'correct';\r\n\t\t\tbreak;\r\n\t\tcase wrong:\r\n\t\t\tstateClass = 'wrong';\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tstateClass = '';\r\n\t}\r\n\r\n\treturn (\r\n\t\t<button\r\n\t\t\tclassName={`game__answer answer-btn answer-btn--${stateClass}`}\r\n\t\t\tonClick={handleClick}\r\n\t\t\tdata-letter={letter}\r\n\t\t>\r\n\t\t\t<span className=\"top-hexagon\"></span>\r\n\t\t\t<span className=\"answer-btn__letter\">{letter}</span>\r\n\t\t\t<span className=\"answer-btn__text\">{text}</span>\r\n\t\t\t<span className=\"bottom-hexagon\"></span>\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nAnswerButton.propTypes = {\r\n\tletter: string,\r\n\ttext: string,\r\n\tcurrentQuestion: shape({\r\n\t\tcorrect: arrayOf(string),\r\n\t\treward: string,\r\n\t}),\r\n\tfinishGame: func,\r\n\tswitchToNextQuestion: func,\r\n};\r\n\r\nexport default AnswerButton;\r\n","import React, { useState } from 'react';\r\n\r\nimport './style.scss';\r\nimport { func } from 'prop-types';\r\n\r\nconst MobileButton = ({ setShowRewards }) => {\r\n\tconst [open, setOpen] = useState(false);\r\n\r\n\tconst handleClick = () => {\r\n\t\tsetOpen((prev) => !prev);\r\n\t\tsetShowRewards((prev) => !prev);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"game__mobile-btn btn-wrapper\" onClick={handleClick}>\r\n\t\t\t<div className={`btn ${open ? 'open' : ''}`}>\r\n\t\t\t\t<span></span>\r\n\t\t\t\t<span></span>\r\n\t\t\t\t<span></span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nMobileButton.propTypes = {\r\n\tsetOpenScore: func,\r\n};\r\n\r\nexport default MobileButton;\r\n","import React from 'react';\r\n\r\nimport './style.scss';\r\nimport { array, number } from 'prop-types';\r\n\r\nconst RewardsList = ({ rewards, questionNumber }) => {\r\n\tconst rewardsLength = rewards.length - 1;\r\n\r\n\treturn (\r\n\t\t<ul className=\"game__rewards-list rewards-list\">\r\n\t\t\t{rewards.map((reward, i) => {\r\n\t\t\t\tconst reversedIndex = rewardsLength - i;\r\n\t\t\t\tlet state = '';\r\n\r\n\t\t\t\tif (reversedIndex === questionNumber) {\r\n\t\t\t\t\tstate = 'current';\r\n\t\t\t\t} else if (reversedIndex < questionNumber) {\r\n\t\t\t\t\tstate = 'previous';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<li\r\n\t\t\t\t\t\tclassName={`rewards-list__item rewards-list__item--${state}`}\r\n\t\t\t\t\t\tkey={reward}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<span className=\"top-hexagon\"></span>\r\n\t\t\t\t\t\t<span className=\"rewards-list__text\">{reward}</span>\r\n\t\t\t\t\t\t<span className=\"bottom-hexagon\"></span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nRewardsList.propTypes = {\r\n\trewards: array,\r\n\tquestionNumber: number,\r\n};\r\n\r\nexport default RewardsList;\r\n","import React, { useState } from 'react';\r\n\r\nimport './style.scss';\r\nimport { func } from 'prop-types';\r\nimport questions from 'data/questions.json';\r\nimport AnswerButton from 'components/AnswerButton';\r\nimport MobileBtn from 'components/MobileButton';\r\nimport RewardsList from 'components/RewardsList';\r\n\r\nconst Game = ({ setGameFinished, setReward, setGameStarted }) => {\r\n\tconst [questionNumber, setQuestionNumber] = useState(0);\r\n\tconst [showRewards, setShowRewards] = useState(false);\r\n\r\n\tconst currentQuestion = questions[questionNumber];\r\n\tconst prevQuestionReward = questionNumber\r\n\t\t? questions[questionNumber - 1].reward\r\n\t\t: '$0';\r\n\r\n\tconst switchToNextQuestion = () => {\r\n\t\tif (questionNumber === questions.length - 1) {\r\n\t\t\tfinishGame(currentQuestion.reward);\r\n\t\t} else {\r\n\t\t\tsetQuestionNumber((prev) => prev + 1);\r\n\t\t}\r\n\t};\r\n\r\n\tconst finishGame = (reward = prevQuestionReward) => {\r\n\t\tsetReward(reward);\r\n\t\tsetGameStarted(false);\r\n\t\tsetGameFinished(true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<section className=\"game\">\r\n\t\t\t<div className=\"game__inner\">\r\n\t\t\t\t<h2 className=\"game__title\">{currentQuestion.question}</h2>\r\n\r\n\t\t\t\t<div className=\"game__answers\">\r\n\t\t\t\t\t{currentQuestion.answers.map((item) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<AnswerButton\r\n\t\t\t\t\t\t\t\tkey={item.letter}\r\n\t\t\t\t\t\t\t\tletter={item.letter}\r\n\t\t\t\t\t\t\t\ttext={item.answer}\r\n\t\t\t\t\t\t\t\tcurrentQuestion={currentQuestion}\r\n\t\t\t\t\t\t\t\tswitchToNextQuestion={switchToNextQuestion}\r\n\t\t\t\t\t\t\t\tfinishGame={finishGame}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div\r\n\t\t\t\tclassName={`game__overlay game__overlay--${\r\n\t\t\t\t\tshowRewards ? 'open' : ''\r\n\t\t\t\t}`}\r\n\t\t\t>\r\n\t\t\t\t<aside className=\"game__rewards\">\r\n\t\t\t\t\t<RewardsList\r\n\t\t\t\t\t\trewards={questions.map((item) => item.reward).reverse()}\r\n\t\t\t\t\t\tquestionNumber={questionNumber}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</aside>\r\n\t\t\t</div>\r\n\r\n\t\t\t<MobileBtn setShowRewards={setShowRewards} />\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nGame.propTypes = {\r\n\tsetGameFinished: func,\r\n\tsetReward: func,\r\n\tsetGameStarted: func,\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\r\n\r\nimport './style.scss';\r\nimport { bool, string, func } from 'prop-types';\r\nimport backgroundImg from 'images/game-start-bg.png';\r\n\r\nconst HomeScreen = ({ gameFinished, setGameStarted, reward }) => {\r\n    return (\r\n        <div\r\n            className=\"home\"\r\n            style={\r\n                gameFinished ? {} : { backgroundImage: `url(${backgroundImg})` }\r\n            }\r\n        >\r\n            <section className=\"home__section\">\r\n                <img\r\n                    className=\"home__hand\"\r\n                    src={require('images/hand.svg')}\r\n                    alt=\"hand\"\r\n                />\r\n\r\n                <div className=\"home__inner\">\r\n                    {gameFinished ? (\r\n                        <>\r\n                            <p className=\"home__score\">Total Score:</p>\r\n                            <h2 className=\"home__title\">{`${reward} earned`}</h2>\r\n                        </>\r\n                    ) : (\r\n                        <h1 className=\"home__title\">\r\n                            Who wants to be a millionaire?\r\n                        </h1>\r\n                    )}\r\n\r\n                    <button\r\n                        className=\"home__button\"\r\n                        onClick={() => setGameStarted(true)}\r\n                    >\r\n                        {gameFinished ? 'Try Again' : 'Start'}\r\n                    </button>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nHomeScreen.propTypes = {\r\n    gameFinished: bool,\r\n    setGameStarted: func,\r\n    reward: string,\r\n};\r\n\r\nexport default HomeScreen;\r\n","import React, { useState } from 'react';\n\nimport 'styles/globalStyles.scss';\nimport Game from 'pages/Game';\nimport HomeScreen from 'pages/HomeScreen';\n\nconst App = () => {\n    const [gameStarted, setGameStarted] = useState(false);\n    const [gameFinished, setGameFinished] = useState(false);\n    const [reward, setReward] = useState('');\n\n    return (\n        <main>\n            {gameStarted ? (\n                <Game\n                    setGameFinished={setGameFinished}\n                    setReward={setReward}\n                    setGameStarted={setGameStarted}\n                />\n            ) : (\n                <HomeScreen\n                    gameFinished={gameFinished}\n                    reward={reward}\n                    setGameStarted={setGameStarted}\n                />\n            )}\n        </main>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}